#+TITLE: Emacs config file
#+DATE: 8 Aug 2023
#+AUTHOR: Clancy Rowley
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+STARTUP: content

* General settings
** Header
#+begin_src emacs-lisp
;;; init.el -- Clancy's Emacs init file

;;; Commentary:
;;; This file is generated from emacs-init.org.  Do not edit this file directly!

;;; Code:
#+end_src

** Garbage collection
Set the garbage collector threshold, to avoid collections
#+begin_src emacs-lisp
(setq gc-cons-percentage 0.5
      gc-cons-threshold (* 128 1024 1024))

(add-hook 'after-init-hook #'garbage-collect t)
#+end_src
** Report time spent loading this file
From [[https://github.com/jwiegley/dot-emacs/blob/master/init.org][John Wiegley's init file]]
#+begin_src emacs-lisp
(defconst emacs-start-time (current-time))

(defun report-time-since-load (&optional suffix)
  (message "Loading init...done (%.3fs)%s"
           (float-time (time-subtract (current-time) emacs-start-time))
           suffix))

(add-hook 'after-init-hook
          #'(lambda () (report-time-since-load " [after-init]"))
          t)
#+end_src

** Auto revert buffers
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Disable custom file
Disable custom-file by making it disposable

#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

** Default major mode
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
;;;; Turn on auto-fill for various modes
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

** Set path
#+begin_src emacs-lisp
(add-to-list 'exec-path "/Library/TeX/texbin")
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (concat "/Library/TeX/texbin:/usr/local/bin:" (getenv "PATH")))
#+end_src

** Set default fill column and window size
#+begin_src emacs-lisp
(setq-default fill-column 80)
(setq default-frame-alist
       '((top . 20) (left . 20)
         (width . 100) (height . 60)))
#+end_src

** Remember recent files
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src

** Enable narrowing
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src
** Custom info files
My custom info files are specified in INFOPATH.  Append the default ones here.
#+begin_src emacs-lisp
(setq Info-additional-directory-list Info-default-directory-list)
#+end_src

** Set up package manager
*** Package
#+begin_src emacs-lisp
;;;; ELPA packages
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
#+end_src

*** Use-package
#+begin_src emacs-lisp
(message "Loading packages...")
(eval-when-compile
  (require 'use-package))
(require 'bind-key)

;; Download packages automatically if not installed
;; NOTE: this can slow down loading of the init file, so disabled by default
;; (require 'use-package-ensure)
;; (setq use-package-always-ensure t)
;; (setq use-package-verbose t)
#+end_src

*** Delight
Simplify mode line, ignoring some minor modes.

Load this before other packages, because delight provides a keyword for =use-package=
#+begin_src emacs-lisp
(require 'delight)
(delight '((eldoc-mode nil "eldoc")))
(delight '((buffer-face-mode nil "face-remap")))
#+end_src

** Emacs
#+begin_src emacs-lisp
(use-package emacs
  :custom
  (completion-ignored-extensions
   '(".aux"
     ".bbl"
     ".bin"
     ".blg"
     ".git/"
     ".o"
     ".pyc"
     ".so"
     ".synctex.gz"
     ".toc"
     "~"))
  (inhibit-startup-screen t)
  (initial-buffer-choice t)
  (initial-scratch-message "")
  (scroll-bar-mode nil)
  (tool-bar-mode nil)

  ;; files.el
  (make-backup-files t)
  (backup-directory-alist '((".*" . "~/.emacs_backups/")))
  (delete-old-versions t)
  (directory-free-space-args "-kh")
  (version-control t)
)
#+end_src

* Custom functions and macros
** Include guards
#+begin_src emacs-lisp
(defun replace-in-string (string regexp newtext)
  "Replace regular expression REGEXP with NEWTEXT in the given STRING."
  (let ((skip (length newtext))
	(start 0))
    (while (string-match regexp string start)
      (setq string (replace-match newtext t t string)
	    start (+ skip (match-beginning 0)))))
  string)

(defun insert-include-guard ()
  "Insert an #ifdef include guard in a C header file."
  (interactive)
  (goto-char 1)
  (let* ((inc-name (replace-in-string (buffer-name (current-buffer)) "\\." "_" ) )
	 (ftag (concat "" (upcase inc-name ) "" )))
    (insert (concat "#ifndef " ftag))
    (newline)
    (insert (concat "#define " ftag))
    (newline)
    (newline)
    (goto-char (point-max))
    (insert "#endif")
    (newline)
    )
  )
#+end_src

** Comments
#+begin_src emacs-lisp
(defun uncomment-line ()
  "Uncomment the current line."
  (interactive)
  (let (a b)
    (beginning-of-line)
    (setq a (point))
    (forward-line)
    (setq b (point))
    (uncomment-region a b)))
#+end_src

** Date
#+begin_src emacs-lisp
(fset 'date
   [?\C-u ?\M-! ?d ?a ?t ?e return ?\C-n])
#+end_src

** Open links to email messages
#+begin_src emacs-lisp
(require 'url-util)

(defun cr-open-message-link (id)
  "Open the mail message corresponding to the given id."
  (let ((plus-decoded (replace-regexp-in-string " " "+" id t t))
        (allowed-chars (append '(?/ ?@ ?+) url-unreserved-chars)))
   (shell-command
    (concat "open message:" (url-hexify-string plus-decoded allowed-chars)))
  )
)
#+end_src

* Keybindings
** Global keybindings
:PROPERTIES:
:ORDERED:  t
:END:
#+begin_src emacs-lisp
(bind-keys :map global-map
  ("<f9>"  . comment-line)
  ("<f10>" . uncomment-line)
  ("<f12>" . bury-buffer)
  ("s-d"   . date)
  ("C-c n" . display-line-numbers-mode)
  ("C-c v" . variable-pitch-mode)
)
#+end_src

** Evil keybindings
#+begin_src emacs-lisp
(use-package evil
  :config
  ;; by default, use Emacs bindings
  (setq evil-default-state 'emacs)
  ;; use vi bindings (Normal mode) only for the following major modes
  (dolist (mode
    '(
      bibtex-mode
      emacs-lisp-mode
      org-mode
      python-mode
      python-ts-mode
      sh-mode
      text-mode
    ))
    (evil-set-initial-state mode 'normal))
  ;; use Emacs bindings for the following major modes
  (dolist (mode
    '(
      grep-mode
      help-mode
      Info-mode
      org-agenda-mode
    ))
    (evil-set-initial-state mode 'emacs))
  (define-key evil-normal-state-map "\M-." nil)
  (define-key evil-normal-state-map (kbd "C-.") nil)
  (evil-mode 1))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(use-package evil-org
  :after org
  :delight
  :hook (org-mode . evil-org-mode))
#+end_src

** Which-key
Show a menu of available key bindings, after a prefix key is entered
#+begin_src emacs-lisp
(use-package which-key
  :delight
  :config
  (which-key-mode))
#+end_src

* Packages
** Appearance
*** Fill column indicator
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :hook ((c-mode-common . fci-mode)
	 (python-mode . fci-mode))
  ;; :config
  ;; (setq fci-rule-color (face-attribute font-lock-comment-face :foreground))
  )
#+end_src

*** Pulsar
The variable =pulsar-pulse-functions= lets you add more functions that should
cause a pulse after they're invoked.
#+begin_src emacs-lisp
(use-package pulsar
  :config
  (add-hook 'next-error-hook #'pulsar-pulse-line)
  (add-hook 'consult-after-jump-hook #'pulsar-recenter-middle)
  (add-hook 'consult-after-jump-hook #'pulsar-reveal-entry)
  (add-hook 'imenu-after-jump-hook #'pulsar-recenter-middle)
  (add-hook 'imenu-after-jump-hook #'pulsar-reveal-entry)
  :init
  (pulsar-global-mode t))
#+end_src

*** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((lisp-mode . rainbow-delimiters-mode)
	 (emacs-lisp-mode . rainbow-delimiters-mode)
	 (LaTeX-mode . rainbow-delimiters-mode)))
#+end_src

*** Whitespace
#+begin_src emacs-lisp
(use-package whitespace
  :hook ((c-mode-common LaTeX-mode org-mode python-mode) . whitespace-mode)
  :delight
  :config
  (setq whitespace-style '(face trailing tabs empty tab-mark)))
#+end_src

** Bibliography
*** Set location of bib files
#+begin_src emacs-lisp
(defconst cr/bib-files '("~/gd/texmf/bibtex/bib/master.bib" "~/gd/texmf/bibtex/bib/jfull.bib"))
#+end_src

*** Citar
Disabled for now
#+begin_src emacs-lisp
(use-package citar
  :disabled
  :custom
  (citar-bibliography cr/bib-files)
  (setq citar-default-action 'citar-open-entry)
  :hook
  ;; (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup))

(use-package citar-embark
  :disabled
  :after (citar embark)
  ;; :delight t
  :hook org-mode)
#+end_src

*** Org citations
#+begin_src emacs-lisp
(use-package oc
  :config
  (require 'oc-biblatex)
  (setq org-cite-global-bibliography cr/bib-files)
  ;; (require 'citar)
  ;; (setq org-cite-insert-processor 'citar
  ;;       org-cite-follow-processor 'citar
  ;;       org-cite-activate-processor 'citar
  ;;       org-cite-export-processors '((latex biblatex)
  ;;                                    (t basic)))
)
#+end_src

** Bookmark
#+begin_src emacs-lisp
(use-package bookmark
  :hook (bookmark-bmenu-mode . hl-line-mode))
#+end_src

** Completion
*** Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
)
#+end_src

*** Corfu
Popup window for code completion
#+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode))
#+end_src

*** Dabbrev
Use dabbrev with Corfu
#+begin_src emacs-lisp
(use-package dabbrev
;; Swap M-/ and C-M-/
:bind (("M-/" . dabbrev-completion)
("C-M-/" . dabbrev-expand))
:custom
(dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

*** Isearch
Display counter showing the total number of matches
#+begin_src emacs-lisp
(setq isearch-lazy-count t)
(setq lazy-count-prefix-format "(%s/%s) ")
#+end_src

Make regular Isearch interpret space as a wildcard
#+begin_src emacs-lisp
(setq search-whitespace-regexp ".*?")
#+end_src

*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
#+end_src

*** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Vertico
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :bind (:map vertico-map
         ("?" . minibuffer-completion-help))
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** Dired
Configure =dired= do use simplified view
#+begin_src emacs-lisp
(use-package dired
  :bind (:map dired-mode-map
              ("C-c C-a" . org-attach-dired-to-subtree))
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . hl-line-mode))
  :custom
  (dired-dwim-target t))
#+end_src

Guess what shell command to apply to files
#+begin_src emacs-lisp
(use-package dired-x
  :hook (dired-mode . (lambda() (dired-omit-mode 1)))
  :config
  (setq dired-guess-shell-alist-user
	'((".*" "open"))))
#+end_src

List directories first
#+begin_src emacs-lisp
(use-package ls-lisp
  :custom
  (ls-lisp-dirs-first t)
  (ls-lisp-use-insert-directory-program nil))
#+end_src

** Embark
Provide a sort of "right-click contextual menu" for actions available in the
minibuffer, or for the symbol at point
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Programming
*** C
#+begin_src emacs-lisp
(use-package cc-mode
  :bind (:map c-mode-map
	      ("<f5>" . compile)
	      ("C-c C-i" . insert-include-guard))
  :pin manual)

(use-package google-c-style
  :hook ((c-mode-common . google-set-c-style)
	 (c-mode-common . google-make-newline-indent)))
#+end_src

*** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :config
  :bind (:map flymake-mode-map
   ("C-x `"   . flymake-goto-next-error)
   ("M-g n"   . flymake-goto-next-error)
   ("M-g M-n" . flymake-goto-next-error)
   ("M-g p"   . flymake-goto-prev-error)
   ("M-g M-p" . flymake-goto-prev-error)
  )
)
#+end_src

*** Makefiles
#+begin_src emacs-lisp
(use-package make-mode
  :bind (:map makefile-mode-map
	      ("<f5>" . compile)))
#+end_src

*** Octave
#+begin_src emacs-lisp
(use-package octave
  :mode ("\\.m\\'" . octave-mode))
#+end_src

*** Python
#+begin_src emacs-lisp
(use-package python
  :bind (:map python-mode-map
	      ("<f11>" . numpydoc-generate)))

(use-package numpydoc
  :commands numpydoc-generate)

(use-package python-isort
    :hook ((python-mode . python-isort-on-save-mode)
           (python-ts-mode . python-isort-on-save-mode))
    :config
    (setq python-isort-arguments '("--line-length=88" "-m=3" "-tc" "-fgw=0"
                                   "-ca" "--stdout" "--atomic" "-")))
#+end_src

*** Conda configuration
#+begin_src emacs-lisp
(use-package conda
  :hook (eshell-mode . conda-env-initialize-eshell)
  ;; :init
  ;; (conda-env-initialize-interactive-shells)
  ;; (conda-env-autoactivate-mode t)
  )
#+end_src

*** Treesitter parsers
In order to use the treesitter versions of these language modes, need to install
the corresponding grammars with =treesit-install-language-grammar=.
#+begin_src emacs-lisp
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
(add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(sh-mode . bash-ts-mode))
(add-to-list 'major-mode-remap-alist '(css-mode . css-ts-mode))
#+end_src

*** Eglot
Language server protocol (LSP) client
#+begin_src emacs-lisp
(use-package eglot)
#+end_src

** Org
#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c d" . org-time-stamp-inactive))
  :config
  (setq org-agenda-files '("~/gd/Todo/todo.org" "~/gd/Reviews/reviews.org"))
  (setq org-default-notes-file "~/gd/Todo/todo.org")
  ;; use symbolic links for attachments
  (setq org-attach-method 'lns)
  (setq org-startup-folded 'content)
  (require 'org-tempo)
  ; use tempo for template expansion (e.g., <se [TAB])
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-src-preserve-indentation t)
  (setq org-highlight-latex-and-related '(latex script))
  (setq org-hide-leading-stars t)

  ;; follow links to email messages
  (org-add-link-type "message" 'cr-open-message-link)

  ;; Enable external applications to send stuff to org
  (require 'org-protocol)

  ;; Custom templates for org-capture
  (setq org-capture-templates
    '(
      ("e" "Email" entry (file "~/gd/Todo/todo.org")
       "* TODO %?  :email:\n  %a\n  %i")
      ("t" "Todo" entry (file "~/gd/Todo/todo.org")
       "* TODO %?")
      ("v" "Review" entry (file "~/gd/Reviews/reviews.org")
       "* TODO %?  :review:")
     )
  )

  ;; Custom views for org-agenda
  (setq org-agenda-custom-commands
    '(
      ("e" "Agenda and emails"
       ((agenda "")
        (tags-todo "email")))
      ("h" "Agenda and tasks @home"
       ((agenda "")
        (tags-todo "@home")))
      ("r" "Agenda and tasks @rocky"
       ((agenda "")
        (tags-todo "@rocky")))
      ("q" "Agenda and tasks @equad"
       ((agenda "")
        (tags-todo "@equad")))
      ("v" "Agenda and all Reviews"
       ((agenda "")
        (tags-todo "review")))
      ("n" "Agenda and all TODOs"
       ((agenda "")
        (alltodo "")))
     )
  )
  ;; (setq org-todo-keywords
  ;; 	'((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)" "CANCELLED(c)")
  ;; 	  (sequence "PROJECT(p)" "|" "FINISHED(f)")))
  ;; (setq org-todo-keyword-faces
  ;; 	'(("STARTED" . org-code)
  ;; 	  ("WAITING" . org-code)
  ;; 	  ("MAYBE" . org-code)
  ;; 	  ("CANCELLED" . org-done)
  ;; 	  ("PROJECT" . org-table)
  ;; 	  ("REVIEWER" . org-code)))
)

(use-package org-superstar
  :hook (org-mode . org-superstar-mode))
#+end_src

** Terminals
*** Xterm-color
Use xterm-color for eshell
#+begin_src emacs-lisp
(use-package xterm-color
  :hook (eshell-mode . (lambda ()
			 (setenv "TERM" "xterm-256color"))))
#+end_src

*** Vterm
#+begin_src emacs-lisp
(use-package vterm)
#+end_src

** Text processing
*** Unfill
#+begin_src emacs-lisp
(use-package unfill
  :bind ([remap fill-paragraph] . unfill-toggle))
#+end_src

*** Flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :hook ((text-mode . flyspell-mode)
	 (c-mode-common . flyspell-prog-mode)))
#+end_src

*** Ripgrep
Recursive grep in a directory
#+begin_src emacs-lisp
(use-package ripgrep
  :defer t)
#+end_src

*** Wgrep
Make grep buffers editable
#+begin_src emacs-lisp
(require 'wgrep)
#+end_src

** TeX
*** AucTeX
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :defines font-latex-fontify-script
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-view-program-list '(("open" "open %o")
				("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
  (setq TeX-view-program-selection '((output-dvi "open")
				     (output-pdf "Skim")
				     (output-html "open")))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  ;; do not fontify subscripts and superscripts
  (setq font-latex-fontify-script nil))

(use-package latex
  :ensure auctex
  ;; This local keymap binding must be done here, not in 'tex'
  :bind (:map LaTeX-mode-map ("<f5>" . compile)))
#+end_src

*** RefTeX
#+begin_src emacs-lisp
(use-package reftex
  :hook (LaTeX-mode . turn-on-reftex)
  :config
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-use-external-file-finders t)
  (setq reftex-external-file-finders
	'(("tex" . "kpsewhich -format=.tex %f")
	  ("bib" . "kpsewhich -format=.bib %f")))
  (setq reftex-ref-macro-prompt nil)  ; do not prompt for ref/pageref
  ;; Define index macros
  (setq reftex-index-macros
	'(;("\\ii{*}" "idx" ?o "" nil t)
	  ("\\indexdefn{*}" "idx" ?d "" nil t)
	  ("\\defined{*}" "idx" ?D "" nil nil)
	  ("\\theoremname{*}" "idx" ?t "" nil nil)
	  index))
  (setq reftex-index-default-macro '(?i ""))
  (setq reftex-index-default-tag nil))
#+end_src

*** Ignore generated files
#+begin_src emacs-lisp
(setq completion-ignored-extensions
      (append completion-ignored-extensions
	     '(".fdb_latexmk" ".fls" ".log" ".out" ".pdf" ".synctex.gz")))
#+end_src

** Version control
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :bind (("<f8>" . magit-status)
	 ("C-x M-g" . magit-dispatch)
	 ("C-c M-g" . magit-file-dispatch)))
#+end_src

*** Highlight changed lines in gutter
#+begin_src emacs-lisp
(use-package diff-hl
  :hook ((vc-dir-mode . turn-on-diff-hl-mode)
	 (magit-pre-refresh . diff-hl-magit-pre-refresh)
	 (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (global-diff-hl-mode))
#+end_src

*** Github-Flavored Markdown
#+begin_src emacs-lisp
(use-package gfm-mode
  :ensure markdown-mode
  :mode "README\\.md\\'")
#+end_src

** Other applications
*** Calc
#+begin_src emacs-lisp
(use-package calc
  :defer t
  :init
  (setq calc-gnuplot-default-device "qt"))
#+end_src

*** Ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.ledger\\'")
#+end_src

* Fonts and themes
** Load various themes
#+begin_src emacs-lisp
(use-package ef-themes)

(use-package modus-themes
  :ensure t
  :config
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts t
        modus-themes-scale-headings t)

  (load-theme 'modus-vivendi :no-confirm)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

(use-package zenburn-theme
  :init
  (setq zenburn-use-variable-pitch t)
  (setq zenburn-scale-org-headlines t))

(load-theme 'modus-vivendi t)
#+end_src

** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Hack-14")
(set-face-attribute 'fixed-pitch nil :font "Hack-14")
(set-face-attribute 'variable-pitch nil :font "Fira Sans-16")
#+end_src

* Tidy up and start server
#+begin_src emacs-lisp
(server-start)
#+end_src
