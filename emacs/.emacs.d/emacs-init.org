#+TITLE: Emacs config file
#+DATE: 26 July 2023
#+AUTHOR: Clancy Rowley
#+PROPERTY: header-args:emacs-lisp :tangle init.el

#+begin_src emacs-lisp
;;; init.el -- Clancy's Emacs init file

;;; Commentary:
;;; This file is generated from emacs-init.org.  Do not edit this file directly!

;;; Code:
#+end_src

* Set up package manager
#+begin_src emacs-lisp
;;;; ELPA packages
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
#+end_src

* Overall settings
#+begin_src emacs-lisp
;;;; Automatically change buffers if they are changed on disk
(global-auto-revert-mode t)

;;;; No startup screen
(setq inhibit-startup-screen t)

;;;; No scroll bars
(scroll-bar-mode -1)

;;;; Disable the tool bar
(tool-bar-mode -1)

;;;; Disable custom-file by making it disposable
(setq custom-file (make-temp-file "emacs-custom-"))

;;;; Relative line numbers
(setq display-line-numbers-type 'relative)
;; (global-display-line-numbers-mode)

;;;; Default major mode
(setq-default major-mode 'text-mode)

;;;; Turn on auto-fill for various modes
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;;;; Set path
(add-to-list 'exec-path "/Library/TeX/texbin")
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (concat "/Library/TeX/texbin:/usr/local/bin:" (getenv "PATH")))

;;;; Set default fill column and window size
(setq-default fill-column 80)
(setq default-frame-alist
       '((top . 20) (left . 20)
         (width . 100) (height . 60)))

;; Save backup files to specified directory
(setq make-backup-files t)
(setq version-control t)
(setq delete-old-versions t)
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))

(recentf-mode 1)
#+end_src

** Enable svg images
There seems to be a bug in Emacs 28, with Mac OS, in which svg images are not
supported.  This fixes the problem.

#+begin_src emacs-lisp
(add-to-list 'image-types 'svg)
#+end_src

* Custom info files
My custom info files are specified in INFOPATH.  Append the default ones here.

#+begin_src emacs-lisp
(setq Info-additional-directory-list Info-default-directory-list)
#+end_src

* Functions

#+begin_src emacs-lisp
(defun replace-in-string (string regexp newtext)
  "Replace regular expression REGEXP with NEWTEXT in the given STRING."
  (let ((skip (length newtext))
	(start 0))
    (while (string-match regexp string start)
      (setq string (replace-match newtext t t string)
	    start (+ skip (match-beginning 0)))))
  string)

(defun insert-include-guard ()
  "Insert an #ifdef include guard in a C header file."
  (interactive)
  (goto-char 1)
  (let* ((inc-name (replace-in-string (buffer-name (current-buffer)) "\\." "_" ) )
	 (ftag (concat ""
		       (upcase inc-name )
		       "" ))
	 )
    (insert (concat "#ifndef " ftag))
    (newline)
    (insert (concat "#define " ftag))
    (newline)
    (newline)
    (goto-char (point-max))
    (insert "#endif")
    (newline)
    )
  )

(defun uncomment-line ()
  "Uncomment the current line."
  (interactive)
  (let (a b)
    (beginning-of-line)
    (setq a (point))
    (forward-line)
    (setq b (point))
    (uncomment-region a b)))
#+end_src

* Macros

#+begin_src emacs-lisp
(fset 'date
   [?\C-u ?\M-! ?d ?a ?t ?e return ?\C-n])
#+end_src

** Key bindings
Convenient function for defining keybindings,
from https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/init.el

#+begin_src emacs-lisp
(defmacro cr-keybind (keymap &rest definitions)
  "Expand key binding DEFINITIONS for the given KEYMAP.
DEFINITIONS is a sequence of string and command pairs."
  (declare (indent 1))
  (unless (zerop (% (length definitions) 2))
    (error "Uneven number of key+command pairs"))
  (let ((keys (seq-filter #'stringp definitions))
        ;; We do accept nil as a definition: it unsets the given key.
        (commands (seq-remove #'stringp definitions)))
    `(when-let (((keymapp ,keymap))
                (map ,keymap))
       ,@(mapcar
          (lambda (pair)
            (unless (and (null (car pair))
                         (null (cdr pair)))
              `(define-key map (kbd ,(car pair)) ,(cdr pair))))
          (cl-mapcar #'cons keys commands)))))

;; Sample of `cr-keybind'

;; (cr-keybind global-map
;;   "C-z" nil
;;   "C-x b" #'switch-to-buffer
;;   "C-x C-c" nil
;;   "C-x k" #'kill-buffer)
#+end_src
* Packages

** Preamble
#+begin_src emacs-lisp
(message "Loading packages...")
(eval-when-compile
  (require 'use-package))
(require 'bind-key)

;; Download packages automatically if not installed
;; (require 'use-package-ensure)
;; (setq use-package-always-ensure t)
;; (setq use-package-verbose t)

#+end_src
*** Delight
Simplify mode line, ignoring some minor modes
#+begin_src emacs-lisp
(require 'delight)
(delight '((eldoc-mode nil "eldoc")))
(delight '((buffer-face-mode nil "face-remap")))
(delight '((evil-org-mode nil "evil-org")))

#+end_src
** Completion
*** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
#+end_src
*** Vertico
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src
*** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
)
#+end_src
*** Corfu
Popup window for code completion
#+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode))
#+end_src
*** Dabbrev
Use dabbrev with Corfu
#+begin_src emacs-lisp
(use-package dabbrev
;; Swap M-/ and C-M-/
:bind (("M-/" . dabbrev-completion)
("C-M-/" . dabbrev-expand))
:custom
(dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Global keybindings
#+begin_src emacs-lisp
(use-package bind-key
  :config
  (bind-key "<f9>" 'comment-line)
  (bind-key "<f10>" 'uncomment-line)
  (bind-key "<f12>" 'bury-buffer)
  (bind-key "s-d" 'date)
  (bind-key "C-c n" 'display-line-numbers-mode))
#+end_src

** Evil keybindings
#+begin_src emacs-lisp
(use-package evil
  :init
  :config
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-set-initial-state 'Info-mode 'emacs)
  ;; unbind M-. so it works for xref
  (define-key evil-normal-state-map "\M-." nil)
  (evil-mode 1))

  ;; (setq evil-search-module 'evil-search))

(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Ripgrep
#+begin_src emacs-lisp
(use-package ripgrep
  :defer t)
#+end_src

** Xterm-color
Use xterm-color for eshell
#+begin_src emacs-lisp
(use-package xterm-color
  :hook (eshell-mode . (lambda ()
			 (setenv "TERM" "xterm-256color"))))
#+end_src

** Conda configuration
#+begin_src emacs-lisp
(use-package conda
  :disabled t
  :hook (eshell-mode . conda-env-initialize-eshell)
  :init
  (conda-env-initialize-interactive-shells)
  (conda-env-autoactivate-mode t)
  )
#+end_src

** Ignore generated files
#+begin_src emacs-lisp
(setq completion-ignored-extensions
      (append completion-ignored-extensions
	     '(".fdb_latexmk" ".fls" ".log" ".out" ".pdf" ".synctex.gz")))
#+end_src

** Git
#+begin_src emacs-lisp
(use-package magit
  :bind (("<f8>" . magit-status)
	 ("C-x M-g" . magit-dispatch)
	 ("C-c M-g" . magit-file-dispatch)))

;;;; Show Git changed lines in gutter
(use-package diff-hl
  :hook ((vc-dir-mode . turn-on-diff-hl-mode)
	 (magit-pre-refresh . diff-hl-magit-pre-refresh)
	 (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (global-diff-hl-mode))
#+end_src

** C stuff
#+begin_src emacs-lisp
(use-package cc-mode
  :bind (:map c-mode-map
	      ("<f5>" . compile)
	      ("C-c C-i" . insert-include-guard))
  :pin manual)

(use-package google-c-style
  :hook ((c-mode-common . google-set-c-style)
	 (c-mode-common . google-make-newline-indent)))
#+end_src
** Makefiles
#+begin_src emacs-lisp
(use-package make-mode
  :bind (:map makefile-mode-map
	      ("<f5>" . compile)))
#+end_src

** Octave
#+begin_src emacs-lisp
(use-package octave
  :mode ("\\.m\\'" . octave-mode))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package elpy
  :disabled t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
  (setenv "WORKON_HOME" "~/miniconda3/")
  :config
  (bind-key "M-." 'elpy-goto-definition))

(use-package python
  :bind (:map python-mode-map
	      ("<f11>" . numpydoc-generate)))

(use-package numpydoc
  :commands numpydoc-generate)

(use-package py-isort
    :hook (python-mode . py-isort-enable-on-save)
    :config
    (setq py-isort-options '("--line-length=88" "-m=3" "-tc" "-fgw=0" "-ca"))
    (add-hook 'before-save-hook 'py-isort-before-save))
#+end_src

** Github-Flavored Markdown
#+begin_src emacs-lisp
(use-package gfm-mode
  :ensure markdown-mode
  :mode "README\\.md\\'")
#+end_src

** Unfill
#+begin_src emacs-lisp
(use-package unfill
  :bind ([remap fill-paragraph] . unfill-toggle))
#+end_src

** Fill column indicator
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :hook ((c-mode-common . fci-mode)
	 (python-mode . fci-mode))
  ;; :config
  ;; (setq fci-rule-color (face-attribute font-lock-comment-face :foreground))
  )
#+end_src

** Whitespace
#+begin_src emacs-lisp
(use-package whitespace
  :hook ((c-mode-common LaTeX-mode org-mode python-mode) . whitespace-mode)
  :delight
  :config
  (setq whitespace-style '(face trailing tabs empty tab-mark)))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((lisp-mode . rainbow-delimiters-mode)
	 (emacs-lisp-mode . rainbow-delimiters-mode)
	 (LaTeX-mode . rainbow-delimiters-mode)))
#+end_src

** Flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :hook ((text-mode . flyspell-mode)
	 (c-mode-common . flyspell-prog-mode)))
#+end_src

** LaTeX
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :defines font-latex-fontify-script
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-view-program-list '(("open" "open %o")
				("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
  (setq TeX-view-program-selection '((output-dvi "open")
				     (output-pdf "Skim")
				     (output-html "open")))
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  ;; do not fontify subscripts and superscripts
  (setq font-latex-fontify-script nil))

(use-package latex
  :ensure auctex
  ;; This local keymap binding must be done here, not in 'tex'
  :bind (:map LaTeX-mode-map ("<f5>" . compile)))
#+end_src

** RefTeX
#+begin_src emacs-lisp
(use-package reftex
  :hook (LaTeX-mode . turn-on-reftex)
  :config
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-use-external-file-finders t)
  (setq reftex-external-file-finders
	'(("tex" . "kpsewhich -format=.tex %f")
	  ("bib" . "kpsewhich -format=.bib %f")))
  (setq reftex-ref-macro-prompt nil)  ; do not prompt for ref/pageref
  ;; Define index macros
  (setq reftex-index-macros
	'(;("\\ii{*}" "idx" ?o "" nil t)
	  ("\\indexdefn{*}" "idx" ?d "" nil t)
	  ("\\defined{*}" "idx" ?D "" nil nil)
	  ("\\theoremname{*}" "idx" ?t "" nil nil)
	  index))
  (setq reftex-index-default-macro '(?i ""))
  (setq reftex-index-default-tag nil))
#+end_src

** Org
#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind (("C-c l" . org-store-link)
	 ("C-c d" . org-time-stamp-inactive))
  :config
  ; use tempo for template expansion (e.g., <se [TAB])
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (setq org-default-notes-file "~/Dropbox/todo.org")
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-src-preserve-indentation t)
  (setq org-highlight-latex-and-related '(latex script))
  (setq org-hide-leading-stars t)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)" "CANCELLED(c)")
	  (sequence "PROJECT(p)" "|" "FINISHED(f)")))
  (setq org-todo-keyword-faces
	'(("STARTED" . org-code)
	  ("WAITING" . org-code)
	  ("MAYBE" . org-code)
	  ("CANCELLED" . org-done)
	  ("PROJECT" . org-table)
	  ("REVIEWER" . org-code))))

(use-package org-superstar
  :hook (org-mode . org-superstar-mode))
#+end_src

** Eglot
Language server protocol (LSP) client
#+begin_src emacs-lisp
(use-package eglot)
#+end_src

** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :delight
  :config
  (which-key-mode))
#+end_src

* Disabled packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
** Company
#+begin_src emacs-lisp
(use-package company
  :delight
  :defer t)
#+end_src

** Flycheck
#+begin_src emacs-lisp 
(use-package flycheck
  :init (global-flycheck-mode)
  :config
  (setq-default flycheck-disabled-checkers '(python-pylint)))
#+end_src

** Ivy/Counsel
#+begin_src emacs-lisp
(use-package ivy
  :delight
  :bind (("C-s" . swiper)
	 ("C-c C-r" . ivy-resume))
  :demand
  :init
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))

(use-package counsel
  :delight
  :init
  (counsel-mode 1))
#+end_src

** LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :delight " LSP"
  :hook (python-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :config
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
;; (use-package lsp-pyright
;;   :ensure t
;;   :hook (python-mode . (lambda ()
;;                           (require 'lsp-pyright)
;;                           (lsp-deferred))))  ; or lsp-deferred
;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :delight '(:eval (concat " " (projectile-project-name)))
  :init
  (projectile-mode +1)
  :bind-keymap
  ("s-p" . projectile-command-map)
  :config
  (setq projectile-completion-system 'default))
#+end_src

** Treemacs
#+begin_src emacs-lisp :tangle no
(use-package treemacs
  :bind ("<f7>" . treemacs))

(use-package treemacs-projectile
  :after (treemacs projectile))
#+end_src

* Set theme

#+begin_src emacs-lisp
;; (use-package atom-one-dark-theme
  ;; :config
  ;; (load-theme 'atom-one-dark t))

;; (use-package ef-themes
;;   :config
;;   (load-theme 'ef-autumn t))

(use-package modus-themes
  :ensure t
  :config
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts t
        modus-themes-scale-headings t)
  ;; (setq modus-themes-headings
  ;;   '((1 . (variable-pitch 1.5))
  ;; 	(2 . (1.3))
  ;; 	(agenda-date . (1.3))
  ;; 	(agenda-structure . (variable-pitch light 1.8))
  ;; 	(t . (1.1))))

  (load-theme 'modus-vivendi :no-confirm)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

;; (use-package zenburn-theme
;;   :init
;;   ;; (set-face-attribute 'default nil :font "Menlo-12" :height 140)
;;   (setq zenburn-use-variable-pitch t)
;;   (setq zenburn-scale-org-headlines t)
;;   :config
;;   (load-theme 'zenburn t))

;;;; Set color-theme
;; (if (fboundp 'load-theme)
;;     (progn
;;       ;; (load-theme 'alect-black t))
;;       ;; (load-theme 'tango-2 t))
;;       ;; (load-theme 'tangotango t))
;;       ;; (load-theme 'monokai t))
;;       ;; (load-theme 'sanityinc-tomorrow-night t))
;;       (load-theme 'zenburn t))
;;       ;; (load-theme 'solarized-dark t))
;;       ;; (load-theme 'gruvbox t))
;;       ;; (load-theme 'doom-one t))
;;   )
#+end_src
** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Hack-14")
(set-face-attribute 'fixed-pitch nil :font "Hack-14")
(set-face-attribute 'variable-pitch nil :font "Fira Sans-16")

#+end_src


** Calc
#+begin_src emacs-lisp
(use-package calc
  :defer t
  :init
  (setq calc-gnuplot-default-device "qt"))
#+end_src

** Ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :mode "\\.ledger\\'")
#+end_src

* Tidy up and start server
#+begin_src emacs-lisp
(server-start)
(message "...done loading Clancy's .emacs file")
#+end_src
