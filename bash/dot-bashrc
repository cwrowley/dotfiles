# Show remote Terminal sessions with a different style.
# TERM_PROGRAM doesn't get set if we are logged in remotely,
# but then the originating Terminal could have done this (hopefully).
# if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
  # function ssh {
    # SetTerminalStyle ssh
    # /usr/bin/ssh "$@"
    # SetTerminalStyle novel
  # }
# fi

export PAGER="less -R"
export EDITOR=emacsclient
export ALTERNATE_EDITOR=vi

export PYTHONSTARTUP=$HOME/.pythonstartup.py

export PETSC_DIR=/Users/clancy/petsc
export PETSC_ARCH=arch-darwin-c-opt
export SLEPC_DIR=/Users/clancy/slepc

# workaround for python -c "import numpy; import torch"
export KMP_DUPLICATE_LIB_OK=TRUE


if [ -f /usr/local/etc/bash_completion ]; then
    . /usr/local/etc/bash_completion
elif [ -f /opt/homebrew/etc/bash_completion ]; then
    . /opt/homebrew/etc/bash_completion
fi

## set prompt
GIT_PS1_SHOWDIRTYSTATE=true

# PS1='\[\e[1;32m\]\h:\[\e[0;34m\] \W \!$\[\e[m\] '
# PS1='\[\e[1m\]\h$\[\e[0m\] '
# PS1='\[\e[1m\]\h \w\[\e[1;32m\]$(__git_ps1)\[\e[1;39m\]$\[\e[0m\] '
# PS1="$BOLD\h $BC\W$BG\$(__git_ps1)$RESET$ "
PS1='\[\e[1;36m\]\h \[\e[1;35m\]\W \[\e[33m\]$(if [ $? == "0" ]; then echo ":)"; else echo ":("; fi)\[\e[1;32m\]$(__git_ps1) \[\e[31m\]$ \[\e[m\]'

#eval `dircolors -b $HOME/.ls_colors`

set -o noclobber

# make bash check its window size afer a process completes
shopt -s checkwinsize

# up/down arrow keys do history lookup
bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'

if [ -f ~/.aliases ]; then
    source ~/.aliases
fi

# if inside Emacs, configure shell for vterm
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi

# functions to sync files with math server
work_dir="Work/"
ref_dir="Reference/"
repo_dir="repos/"
rsync_local="$HOME/"
rsync_remote="math.princeton.edu:"
do_rsync () {
    rsync -rlptvuzhe ssh --exclude='.DS_Store' "$@"
}
rsync_pulldir () {
    syncdir=$1
    shift
    echo "Pulling directory $syncdir from $rsync_remote"
    do_rsync "$@" $rsync_remote$syncdir $rsync_local$syncdir
    echo -e "\033[1;32mFinished pulling $syncdir $@ $(date)\033[0m"
}
rsync_pushdir () {
    syncdir=$1
    shift
    echo "Pushing directory $syncdir to $rsync_remote"
    do_rsync "$@" $rsync_local$syncdir $rsync_remote$syncdir
    echo -e "\033[1;32mFinished pushing $syncdir $@ $(date)\033[0m"
}
pushwork () { rsync_pushdir $work_dir "$@"; }
pullwork () { rsync_pulldir $work_dir "$@"; }
pushref  () { rsync_pushdir $ref_dir "$@"; }
pullref  () { rsync_pulldir $ref_dir "$@"; }
pushrepos () { rsync_pushdir $repo_dir "$@"; }
pullrepos () { rsync_pulldir $repo_dir "$@"; }
# pushmath () { pushwork "$@"; pushref "$@"; }
# pullmath () { pullwork "$@"; pullref "$@"; }
pushmath () { pushrepos "$@"; }
pullmath () { pullrepos "$@"; }

# sync course files with H drive
push433 () {
    echo "Pushing directory mae433 to arizona"
    do_rsync "$@" $HOME/mae433/ arizona.princeton.edu:mae433/
}
pull433 () {
    echo "Pulling directory mae433 from arizona"
    do_rsync "$@" arizona.princeton.edu:mae433/ $HOME/mae433/
}

# Python virtual environments
export VENV_HOME=~/venvs

# list environments
lsenv() {
    echo "Available environments in $VENV_HOME:"
    \ls -1 $VENV_HOME
}

# new environment
mkenv() {
    local dir
    if [ "$1" = "-g" ]; then
        dir=$VENV_HOME
        shift
    else
        dir=.
    fi
    if [ -z "$1" ]; then
        echo "Usage: mkenv [-g] <env_name>"
        return 1
    fi
    echo "Making new environment $1 in $dir"
    pushd $dir
    python3 -m venv "$1"
    source "$1"/bin/activate
    pip install --upgrade pip
    pip install pip-tools
    popd
}

# activate an environment
activate() {
    local env
    if [ -z "$1" ]; then
        # no arguments: use default local directory
        for dir in .venv venv; do
            if [ -d $dir ]; then
                env=$dir
                break
            fi
        done
        if [ -z $env ]; then
            echo "Default local environment not found"
            return 1
        fi
    else
        # at least one argument
        if [ "$1" = "-g" ]; then
            # global environment
            shift
            if [ -z "$1" ]; then
                echo "Usage: activate [-g] <env_name>"
                lsenv
                return 1
            fi
            env=$VENV_HOME/"$1"
        else
            # local environment
            env="$1"
        fi
    fi
    if [ -d "$env" ]; then
        source "$env"/bin/activate
    else
        echo "Error: Environment '$1' not found."
        return 1
    fi
}

